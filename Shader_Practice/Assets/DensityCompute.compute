// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel DiffuseDensity
#pragma kernel AdvectDensity
#pragma kernel SwapDensity
#pragma kernel DiffuseVelocity
#pragma kernel AdvectVelocity
#pragma kernel Project
#pragma kernel SwapVelocity
#pragma kernel Draw
#pragma kernel swapP
#pragma kernel findDivergence



struct fluid{
    float densityOld;
    float densityNew;
    float2 velocityOld;
    float2 velocityNew;
    float p_new;
    float p_old;
    float delV;
    
};
RWStructuredBuffer<fluid> fluidData;
RWTexture2D<float4> Density;
float diffusionFactor;
uint2 densityAdd;
bool enabled;
uint width;
uint height;
float4 _Time;
int indexFromId(uint3 id){
    return id.x + width * (id.y + height * id.z);
}
int indexFromIdCoords(uint x,uint y, uint z){
    return x + width * (y + height * z);
}
void setBoundaryDensity(uint3 id){
    
    if(id.x == 10){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityNew = fluidData[indexFromIdCoords(id.x+1,id.y,id.z)].densityNew;
    }
    if(id.x == width){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityNew = fluidData[indexFromIdCoords(id.x-1,id.y,id.z)].densityNew;
    }
    if(id.y == 10){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityNew = fluidData[indexFromIdCoords(id.x,id.y+1,id.z)].densityNew;
    }
    if(id.y == height){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityNew = fluidData[indexFromIdCoords(id.x,id.y-1,id.z)].densityNew;
    }
    
    fluidData[indexFromIdCoords(0,0,id.z)].densityNew = (fluidData[indexFromIdCoords(1,0,id.z)].densityNew + fluidData[indexFromIdCoords(0,1,id.z)].densityNew)/2;
    fluidData[indexFromIdCoords(width,0,id.z)].densityNew = (fluidData[indexFromIdCoords(width-1,0,id.z)].densityNew + fluidData[indexFromIdCoords(width,1,id.z)].densityNew)/2;
    fluidData[indexFromIdCoords(0,height,id.z)].densityNew = (fluidData[indexFromIdCoords(1,height,id.z)].densityNew + fluidData[indexFromIdCoords(0,height - 1,id.z)].densityNew)/2;
    fluidData[indexFromIdCoords(width,height,id.z)].densityNew = (fluidData[indexFromIdCoords(width-1,height,id.z)].densityNew + fluidData[indexFromIdCoords(width,height - 1,id.z)].densityNew)/2;
}
void setBoundaryVelocity(uint3 id){
    if(id.x == 10){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew.x = -1 * fluidData[indexFromIdCoords(id.x+1,id.y,id.z)].velocityNew.x;
    }
    if(id.x == width){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew.x =  -1 * fluidData[indexFromIdCoords(id.x-1,id.y,id.z)].velocityNew.x;
    }
    if(id.y == 10){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew.y = -1 * fluidData[indexFromIdCoords(id.x,id.y+1,id.z)].velocityNew.y;
    }
    if(id.y == height){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew.y = -1 * fluidData[indexFromIdCoords(id.x,id.y-1,id.z)].velocityNew.y;
    }
    fluidData[indexFromIdCoords(0,0,id.z)].velocityNew = (fluidData[indexFromIdCoords(1,0,id.z)].velocityNew + fluidData[indexFromIdCoords(0,1,id.z)].velocityNew)/2;
    fluidData[indexFromIdCoords(width,0,id.z)].velocityNew = (fluidData[indexFromIdCoords(width-1,0,id.z)].velocityNew + fluidData[indexFromIdCoords(width,1,id.z)].velocityNew)/2;
    fluidData[indexFromIdCoords(0,height,id.z)].velocityNew = (fluidData[indexFromIdCoords(1,height,id.z)].velocityNew + fluidData[indexFromIdCoords(0,height - 1,id.z)].velocityNew)/2;
    fluidData[indexFromIdCoords(width,height,id.z)].velocityNew = (fluidData[indexFromIdCoords(width-1,height,id.z)].velocityNew + fluidData[indexFromIdCoords(width,height - 1,id.z)].velocityNew)/2;
}

void setBoundarydelV(uint3 id){
    if(id.x == 10){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].delV = fluidData[indexFromIdCoords(id.x+1,id.y,id.z)].delV;
    }
    if(id.x == width){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].delV = fluidData[indexFromIdCoords(id.x-1,id.y,id.z)].delV;
    }
    if(id.y == 10){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].delV = fluidData[indexFromIdCoords(id.x,id.y+1,id.z)].delV;
    }
    if(id.y == height){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].delV = fluidData[indexFromIdCoords(id.x,id.y-1,id.z)].delV;
    }
    fluidData[indexFromIdCoords(0,0,id.z)].delV = (fluidData[indexFromIdCoords(1,0,id.z)].delV + fluidData[indexFromIdCoords(0,1,id.z)].delV)/2;
    fluidData[indexFromIdCoords(width,0,id.z)].delV = (fluidData[indexFromIdCoords(width-1,0,id.z)].delV + fluidData[indexFromIdCoords(width,1,id.z)].delV)/2;
    fluidData[indexFromIdCoords(0,height,id.z)].delV = (fluidData[indexFromIdCoords(1,height,id.z)].delV + fluidData[indexFromIdCoords(0,height - 1,id.z)].delV)/2;
    fluidData[indexFromIdCoords(width,height,id.z)].delV = (fluidData[indexFromIdCoords(width-1,height,id.z)].delV + fluidData[indexFromIdCoords(width,height - 1,id.z)].delV)/2;
}
void setBoundaryP(uint3 id){
    if(id.x == 10){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].delV = fluidData[indexFromIdCoords(id.x+1,id.y,id.z)].p_new;
    }
    if(id.x == width){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].delV = fluidData[indexFromIdCoords(id.x-1,id.y,id.z)].p_new;
    }
    if(id.y == 10){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].delV = fluidData[indexFromIdCoords(id.x,id.y+1,id.z)].p_new;
    }
    if(id.y == height){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].delV = fluidData[indexFromIdCoords(id.x,id.y-1,id.z)].p_new;
    }
    fluidData[indexFromIdCoords(0,0,id.z)].p_new = (fluidData[indexFromIdCoords(1,0,id.z)].p_new + fluidData[indexFromIdCoords(0,1,id.z)].p_new)/2;
    fluidData[indexFromIdCoords(width,0,id.z)].p_new = (fluidData[indexFromIdCoords(width-1,0,id.z)].p_new + fluidData[indexFromIdCoords(width,1,id.z)].p_new)/2;
    fluidData[indexFromIdCoords(0,height,id.z)].p_new = (fluidData[indexFromIdCoords(1,height,id.z)].p_new + fluidData[indexFromIdCoords(0,height - 1,id.z)].p_new)/2;
    fluidData[indexFromIdCoords(width,height,id.z)].p_new = (fluidData[indexFromIdCoords(width-1,height,id.z)].p_new + fluidData[indexFromIdCoords(width,height - 1,id.z)].p_new)/2;
}
void diffusionDensity(uint3 id){
    
    float scaler = diffusionFactor;
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityNew = (fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityOld +  scaler * (fluidData[indexFromIdCoords(id.x+1,id.y,id.z)].densityNew + 
    fluidData[indexFromIdCoords(id.x-1,id.y,id.z)].densityNew+
    fluidData[indexFromIdCoords(id.x,id.y+1,id.z)].densityNew+
    fluidData[indexFromIdCoords(id.x,id.y-1,id.z)].densityNew))/(1+4*scaler);
    
    setBoundaryDensity(id);
}
void diffusionVelocity(uint3 id){
    
    float scaler = diffusionFactor ;
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew = (fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityOld + scaler * (fluidData[indexFromIdCoords(id.x+1,id.y,id.z)].velocityNew + 
    fluidData[indexFromIdCoords(id.x-1,id.y,id.z)].velocityNew+
    fluidData[indexFromIdCoords(id.x,id.y+1,id.z)].velocityNew+
    fluidData[indexFromIdCoords(id.x,id.y-1,id.z)].velocityNew))/(1+4*scaler);
    
    setBoundaryVelocity(id);

}

void advectionDensity(uint3 id){
    
    float velX = fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityOld.x;
    float velY = fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityOld.y;
    if(velX<0){
        velX = floor(velX);
    }
    if(velY<0){
        velY = floor(velY);
    }
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityNew = fluidData[indexFromIdCoords(id.x-velX,id.y-velY,id.z)].densityOld;
    //fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew = fluidData[indexFromIdCoords(id.x-velX,id.y-velY,id.z)].velocityNew; 
    setBoundaryDensity(id);
}

void advectionVelocity(uint3 id){
    float velX = fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityOld.x;
    float velY = fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityOld.y;
    if(velX<0){
        velX = floor(velX);
    }
    if(velY<0){
        velY = floor(velY);
    }
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew = fluidData[indexFromIdCoords(id.x-velX,id.y-velY,id.z)].velocityOld;

    setBoundaryVelocity(id);
}
void addDensity(uint3 id){
    //fluidData[indexFromIdCoords(25 ,25,id.z)].densityOld += 5;
    //fluidData[indexFromIdCoords(25,25,id.z)].velocityOld = float2(50,0);
    //fluidData[indexFromIdCoords(15,20,id.z)].velocityOld += float2(-1,0);
    //fluidData[indexFromIdCoords(15,5,id.z)].densityOld = 1;
    //fluidData[indexFromIdCoords(15,5,id.z)].velocityOld += float2(1,0);
    if(id.x == densityAdd.x && id.y == densityAdd.y && enabled){
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityOld = 1;
        /*for(int i=0;i<20;i++){
            fluidData[indexFromIdCoords(id.x-i,id.y,id.z)].velocityOld += float2(-10,0);
        }*/
        fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityOld = float2(1,0);
    }
    
}


void projectVelocity(uint3 id){

    
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew -= float2((fluidData[indexFromIdCoords(id.x+1,id.y,id.z)].p_new - fluidData[indexFromIdCoords(id.x-1,id.y,id.z)].p_new)/2.0 ,
    (fluidData[indexFromIdCoords(id.x,id.y+1,id.z)].p_new  - fluidData[indexFromIdCoords(id.x,id.y-1,id.z)].p_new)/2.0);
    setBoundaryVelocity(id);

}
void densityAlgorithm(uint3 id){
    addDensity(id);
    diffusionDensity(id);
    //advectionDensity(id);
    Density[id.xy] = fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityNew;
    //Density[id.xy] = float4(1,1,1,0);

}/*
void velocityAlgorithm(uint3 id){
  
    diffusionVelocity(id);
    //projectVelocity(id);
    advectionVelocity(id);
    //projectVelocity(id);
}*/
[numthreads(8,8,1)]
void DiffuseDensity (uint3 id : SV_DispatchThreadID)
{
    //fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityOld = float2(1,0);
    addDensity(id);
    diffusionDensity(id);
}
[numthreads(8,8,1)]
void AdvectDensity(uint3 id : SV_DispatchThreadID){
    advectionDensity(id);
    //Density[id.xy] = float4(1,0,0,0);
}
[numthreads(8,8,1)]
void SwapDensity(uint3 id: SV_DispatchThreadID)
{
    float temp = fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityOld;
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityOld = fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityNew;
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityNew = temp;
}
[numthreads(8,8,1)]
void DiffuseVelocity(uint3 id: SV_DispatchThreadID)
{
    diffusionVelocity(id);
    
}
[numthreads(8,8,1)]
void AdvectVelocity(uint3 id: SV_DispatchThreadID)
{
    advectionVelocity(id);
}
[numthreads(8,8,1)]
void Project(uint3 id: SV_DispatchThreadID)
{
    projectVelocity(id);
}
[numthreads(8,8,1)]
void SwapVelocity(uint3 id: SV_DispatchThreadID){
    float2 temp = fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityOld;
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityOld = fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew;
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew = temp;
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].p_new = 0;
    
}
[numthreads(8,8,1)]
void Draw(uint3 id: SV_DispatchThreadID){
    /*
    if(fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew.x<0){
        Density[id.xy] = float4(0,fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew.y,fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew.x*-1,0);
    }
    else{
        Density[id.xy] = float4(fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew.x,fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew.y,0,0);
    }*/
    //Density[id.xy] = float4(fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew.x,fluidData[indexFromIdCoords(id.x,id.y,id.z)].velocityNew.y,0,0);
    Density[id.xy] = fluidData[indexFromIdCoords(id.x,id.y,id.z)].densityNew;
    if(id.x == 0){
        Density[id.xy] = float4(0,0,1,0);
    }
    if(id.x == width-1){
        Density[id.xy] = float4(0,0,1,0);
    }
    if(id.y == 0){
        Density[id.xy] = float4(1,0,0,0);
    }
    if(id.y == height-1){
        Density[id.xy] = float4(0,0,1,0);
    }
    //Density[indexFromIdCoords(1920,1080,0)] = 10;
}
[numthreads(8,8,1)]
void swapP(uint3 id: SV_DispatchThreadID){
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].p_old = fluidData[indexFromIdCoords(id.x,id.y,id.z)].p_new;
}
[numthreads(8,8,1)]
void findDivergence(uint3 id: SV_DispatchThreadID){
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].delV = (fluidData[indexFromIdCoords(id.x+1,id.y,id.z)].velocityNew.x - 
                fluidData[indexFromIdCoords(id.x-1,id.y,id.z)].velocityNew.x +
                fluidData[indexFromIdCoords(id.x,id.y+1,id.z)].velocityNew.y - 
                fluidData[indexFromIdCoords(id.x,id.y-1,id.z)].velocityNew.y)/(2.0);
    setBoundarydelV(id);
    setBoundaryP(id);
    fluidData[indexFromIdCoords(id.x,id.y,id.z)].p_new = ((fluidData[indexFromIdCoords(id.x-1,id.y,id.z)].p_old +
    fluidData[indexFromIdCoords(id.x+1,id.y,id.z)].p_old +
    fluidData[indexFromIdCoords(id.x,id.y-1,id.z)].p_old + 
    fluidData[indexFromIdCoords(id.x,id.y+1,id.z)].p_old) - fluidData[indexFromIdCoords(id.x,id.y,id.z)].delV)/4.0;
    setBoundaryP(id);
    
}
